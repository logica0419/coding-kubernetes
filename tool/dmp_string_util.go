// Copied from https://github.com/sergi/go-diff
// Customized by Takuto Nagami (logica)
package main

import (
	"fmt"
	"strings"
	"unicode/utf8"
)

const (
	UnicodeInvalidRangeStart = 0xD800
	UnicodeInvalidRangeEnd   = 0xDFFF
	UnicodeInvalidRangeDelta = UnicodeInvalidRangeEnd - UnicodeInvalidRangeStart + 1
)

// indexOf returns the first index of pattern in str, starting at str[i].
func indexOf(str string, pattern string, i int) int {
	if i > len(str)-1 {
		return -1
	}

	if i <= 0 {
		return strings.Index(str, pattern)
	}

	ind := strings.Index(str[i:], pattern)
	if ind == -1 {
		return -1
	}

	return ind + i
}

// runesIndexOf returns the index of pattern in target, starting at target[i].
func runesIndexOf(target, pattern []rune, i int) int {
	if i > len(target)-1 {
		return -1
	}

	if i <= 0 {
		return runesIndex(target, pattern)
	}

	ind := runesIndex(target[i:], pattern)
	if ind == -1 {
		return -1
	}

	return ind + i
}

func runesEqual(rune1, rune2 []rune) bool {
	if len(rune1) != len(rune2) {
		return false
	}

	for i, c := range rune1 {
		if c != rune2[i] {
			return false
		}
	}

	return true
}

// runesIndex is the equivalent of strings.Index for rune slices.
func runesIndex(r1, r2 []rune) int {
	last := len(r1) - len(r2)
	for i := 0; i <= last; i++ {
		if runesEqual(r1[i:i+len(r2)], r2) {
			return i
		}
	}

	return -1
}

// These constants define the number of bits representable
// in 1,2,3,4 byte utf8 sequences, respectively.
const (
	OneByteBits   = 7
	TwoByteBits   = 11
	ThreeByteBits = 16
	FourByteBits  = 21
)

// Converts a rune generated by intToRune back to an integer
func runeToInt(src rune) uint32 {
	i := uint32(src)
	if i < (1 << OneByteBits) {
		return i
	}

	bytes := []byte{0, 0, 0, 0}

	size := utf8.EncodeRune(bytes, src)

	//nolint: mnd
	if size == 2 {
		return uint32(bytes[0]&0b11111)<<6 | uint32(bytes[1]&0b111111)
	}

	//nolint: mnd
	if size == 3 {
		result := uint32(bytes[0]&0b1111)<<12 | uint32(bytes[1]&0b111111)<<6 | uint32(bytes[2]&0b111111)
		if result >= UnicodeInvalidRangeEnd {
			return result - UnicodeInvalidRangeDelta
		}

		return result
	}

	//nolint: mnd
	if size == 4 {
		result := uint32(bytes[0]&0b111)<<18 | uint32(bytes[1]&0b111111)<<12 | uint32(bytes[2]&0b111111)<<6 | uint32(bytes[3]&0b111111)

		return result - UnicodeInvalidRangeDelta - 3
	}

	panic(fmt.Sprintf("Unexpected state decoding rune=%v size=%d", src, size))
}
